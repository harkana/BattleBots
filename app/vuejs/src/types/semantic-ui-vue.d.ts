/** Declaration file generated by dts-gen */

export function floated(el: any, _ref: any): void;

export namespace Accordion {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function render(...args: any[]): any;

    namespace methods {
        function isPanelActive(index: any): any;

        function register(el: any): any;

        function toggle(index: any): any;

        function toggleChildren(): void;

        function toggleEl(el: any): any;

    }

    namespace props {
        class exclusive {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class fluid {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class panels {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class styled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const activeIndex: any[];

    }

}

export namespace AccordionContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace methods {
        function setActive(value: any): void;

        function toggle(): void;

    }

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

    namespace watch {
        function active(value: any): void;

    }

}

export namespace AccordionTitle {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace methods {
        function setActive(value: any): void;

        function toggle(): void;

    }

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

    namespace watch {
        function active(value: any): void;

    }

}

export namespace Advertisement {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        centered: {
            default: boolean;
            description: string;
            type: any;
        };
        test: {
            description: string;
            type: any[];
        };
        unit: {
            choices: string[];
            description: string;
            required: boolean;
            type: any[];
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Breadcrumb {
    const components: {
        SuiBreadcrumbDivider: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                icon: any;
            };
            render: any;
        };
        SuiBreadcrumbSection: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                active: any;
                link: any;
            };
            render: any;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class sections {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

    }

}

export namespace BreadcrumbDivider {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace BreadcrumbSection {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class link {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Button {
    const events: {
        click: {
            description: string;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        const tabIndex: {
            description: string;
            type: any[];
        };

        namespace active {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace animated {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace attached {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace basic {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace circular {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace className {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const description: string;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace compact {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace content {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const description: string;

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace floated {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace fluid {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace inverted {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace labelPosition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace loading {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace negative {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace positive {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace primary {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace secondary {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace social {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace toggle {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

    }

}

export namespace ButtonContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        hidden: {
            description: string;
            type: any;
        };
        visible: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ButtonGroup {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class basic {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class icons {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class labeled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class vertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace attached {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace widths {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace ButtonOr {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class text {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace Card {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace CardContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class extra {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace CardDescription {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CardGroup {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class stackable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace itemsPerRow {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace CardHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CardMeta {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Checkbox {
    const events: {
        change: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const model: {
        event: string;
        prop: string;
    };

    const name: string;

    function render(...args: any[]): any;

    namespace computed {
        function isArray(): any;

        function isChecked(): any;

    }

    namespace methods {
        function setValue(e: any): any;

    }

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class name {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class radio {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class required {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class toggle {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const inputValue: any[];

        const value: any[];

    }

}

export namespace Comment {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentAction {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentActions {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentAuthor {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentAvatar {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class src {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace CommentContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentGroup {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentMetadata {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace CommentText {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Container {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        fluid: {
            description: string;
            type: any;
        };
        text: {
            description: string;
            type: any;
        };
        textAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Dimmer {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace DimmerDimmable {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace Divider {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class clearing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class fitted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class hidden {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class horizontal {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class vertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Dropdown {
    const events: {
        input: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        allowAdditions: {
            description: string;
            type: any;
        };
        button: {
            description: string;
            type: any;
        };
        closeOnBlur: {
            default: boolean;
            description: string;
            type: any;
        };
        direction: {
            choices: string[];
            default: string;
            description: string;
            type: any;
            validator: any;
        };
        floating: {
            description: string;
            type: any;
        };
        fluid: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
        item: {
            description: string;
            type: any;
        };
        labeled: {
            description: string;
            type: any;
        };
        loading: {
            description: string;
            type: any;
        };
        maxSelections: {
            default: number;
            description: string;
            type: any;
        };
        maxSelectionsMessage: {
            default: string;
            description: string;
            type: any;
        };
        multiple: {
            description: string;
            type: any;
        };
        noResultsMessage: {
            default: string;
            description: string;
            type: any;
        };
        openOnFocus: {
            default: boolean;
            description: string;
            type: any;
        };
        options: {
            default: any;
            description: string;
            type: any;
        };
        placeholder: {
            description: string;
            type: any;
        };
        pointing: {
            description: string;
            type: any;
        };
        search: {
            description: string;
            type: any;
        };
        searchInMenu: {
            description: string;
            type: any;
        };
        selection: {
            description: string;
            type: any;
        };
        text: {
            description: string;
            type: any;
        };
        value: {
            description: string;
            type: any[];
        };
    };

    function data(): any;

    function destroyed(): void;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace computed {
        function animation(): any;

        function downward(): any;

        function filteredOptions(): any;

        function maximumValuesSelected(): any;

        function menuNode(): any;

        function message(): any;

        function multipleValue(): any;

        function searchNode(): any;

        function selectedNodes(): any;

        function textNode(): any;

    }

    namespace methods {
        function addEventPath(): any;

        function calculateMenuDirection(): void;

        function closeMenu(): void;

        function deselectItem(selectedValue: any): any;

        function findOption(value: any): any;

        function focusSearch(): void;

        function handleBlur(e: any): void;

        function handleClick(e: any): any;

        function handleClickOnSelectedNode(e: any): void;

        function handleFocus(): void;

        function handleKeyDown(e: any): void;

        function handleMouseDown(): void;

        function handleSearchKeyDown(e: any): void;

        function register(menu: any): void;

        function resizeInput(): void;

        function selectItem(selectedValue: any): any;

        function setOpen(...args: any[]): void;

        function toggleFilteredText(filteredText: any, filter: any): void;

        function updateFilter(event: any): void;

        function updateSelectedIndex(): any;

    }

    namespace watch {
        function filter(): void;

        function filteredOptions(): void;

    }

}

export namespace DropdownDivider {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace DropdownHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace DropdownItem {
    const events: {
        select: {
            custom: boolean;
        };
    };

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        active: {
            default: boolean;
            description: string;
            type: any;
        };
        disabled: {
            default: boolean;
            description: string;
            type: any;
        };
        flag: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
        image: {
            description: string;
            type: any;
        };
        label: {
            description: string;
            type: any;
        };
        selected: {
            default: boolean;
            description: string;
            type: any;
        };
        text: {
            description: string;
            type: any;
        };
        value: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

    namespace methods {
        function select(): void;

    }

}

export namespace DropdownMenu {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace computed {
        function animation(): any;

    }

    namespace methods {
        function onAnimationEnded(): void;

        function setOpen(open: any): void;

    }

    namespace watch {
        function open(newValue: any): void;

    }

}

export namespace Embed {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        active: {
            description: string;
            type: any;
        };
        aspectRatio: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        autoplay: {
            default: boolean;
            description: string;
            type: any;
        };
        brandedUI: {
            description: string;
            type: any;
        };
        color: {
            default: string;
            description: string;
            type: any;
        };
        hd: {
            default: boolean;
            description: string;
            type: any;
        };
        icon: {
            default: string;
            description: string;
            type: any;
        };
        id: {
            description: string;
            type: any;
        };
        iframe: {
            description: string;
            type: any;
        };
        placeholder: {
            description: string;
            type: any;
        };
        source: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        url: {
            description: string;
            type: any;
        };
    };

    function data(): any;

    function render(...args: any[]): any;

    namespace computed {
        function isActiveState(): any;

    }

    namespace methods {
        function setActive(): void;

    }

}

export namespace Feed {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        events: {
            description: string;
            type: any;
        };
        size: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        date: {
            description: string;
            type: any;
        };
        extraImages: {
            description: string;
            type: any;
        };
        extraText: {
            description: string;
            type: any;
        };
        meta: {
            description: string;
            type: any;
        };
        summary: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedDate {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedEvent {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        date: {
            description: string;
            type: any;
        };
        extraImages: {
            description: string;
            type: any;
        };
        extraText: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
        image: {
            description: string;
            type: any;
        };
        meta: {
            description: string;
            type: any;
        };
        summary: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedExtra {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        images: {
            description: string;
            type: any[];
        };
        text: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedLabel {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
        image: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedLike {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedMeta {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        like: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedSummary {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
        date: {
            description: string;
            type: any;
        };
        user: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FeedUser {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Flag {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class name {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace Form {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        equalWidth: {
            description: string;
            type: any;
        };
        error: {
            description: string;
            type: any;
        };
        inverted: {
            description: string;
            type: any;
        };
        loading: {
            description: string;
            type: any;
        };
        size: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        state: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        success: {
            description: string;
            type: any;
        };
        unstackable: {
            description: string;
            type: any;
        };
        warning: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FormField {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        disabled: {
            description: string;
            type: any;
        };
        error: {
            description: string;
            type: any;
        };
        inline: {
            description: string;
            type: any;
        };
        required: {
            description: string;
            type: any;
        };
        width: {
            choices: number[];
            description: string;
            type: any[];
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace FormFields {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        fields: {
            choices: number[];
            description: string;
            type: any[];
            validator: any;
        };
        grouped: {
            description: string;
            type: any;
        };
        inline: {
            description: string;
            type: any;
        };
        unstackable: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Grid {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        celled: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        centered: {
            description: string;
            type: any;
        };
        columns: {
            choices: number[];
            description: string;
            type: any[];
            validator: any;
        };
        container: {
            description: string;
            type: any;
        };
        divided: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        doubling: {
            description: string;
            type: any;
        };
        padded: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        relaxed: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        reversed: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        stackable: {
            description: string;
            type: any;
        };
        stretched: {
            description: string;
            type: any;
        };
        textAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        verticalAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        verticallyReversed: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace GridColumn {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class centered {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace computer {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace floated {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace largeScreen {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace mobile {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace only {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace stretched {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace tablet {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace textAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace verticalAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace widescreen {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace width {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace GridRow {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        centered: {
            description: string;
            type: any;
        };
        color: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        columns: {
            choices: number[];
            description: string;
            type: any[];
            validator: any;
        };
        divided: {
            description: string;
            type: any;
        };
        only: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        reversed: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        stretched: {
            description: string;
            type: any;
        };
        textAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        verticalAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Header {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class block {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class content {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class dividing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class sub {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const icon: {
            default: boolean;
            type: any[];
        };

        namespace attached {
            const choices: boolean[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace floated {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace image {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const description: string;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace textAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace HeaderContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace HeaderSubheader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Icon {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class circular {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class fitted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const required: boolean;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace Image {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class centered {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class hidden {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class wrapped {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace avatar {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace bordered {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace circular {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace floated {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace rounded {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace shape {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace spaced {
            const choices: boolean[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace src {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const required: boolean;

        }

        namespace verticalAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

    }

}

export namespace ImageGroup {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        size: {
            choices: string[];
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Input {
    const components: {
        SuiButton: {
            events: {
                click: {
                    description: string;
                };
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                active: {
                    description: string;
                    type: any;
                };
                animated: {
                    choices: boolean[];
                    description: string;
                    type: any[];
                    validator: any;
                };
                attached: {
                    choices: string[];
                    description: string;
                    type: any;
                    validator: any;
                };
                basic: {
                    description: string;
                    type: any;
                };
                circular: {
                    description: string;
                    type: any;
                };
                className: {
                    description: string;
                    type: any;
                };
                color: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                compact: {
                    description: string;
                    type: any;
                };
                content: {
                    description: string;
                    type: any;
                };
                disabled: {
                    description: string;
                    type: any;
                };
                floated: {
                    choices: string[];
                    description: string;
                    type: any;
                    validator: any;
                };
                fluid: {
                    description: string;
                    type: any;
                };
                icon: any;
                inverted: {
                    description: string;
                    type: any;
                };
                labelPosition: {
                    choices: string[];
                    description: string;
                    type: any;
                    validator: any;
                };
                loading: {
                    description: string;
                    type: any;
                };
                negative: {
                    description: string;
                    type: any;
                };
                positive: {
                    description: string;
                    type: any;
                };
                primary: {
                    description: string;
                    type: any;
                };
                secondary: {
                    description: string;
                    type: any;
                };
                size: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                social: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                tabIndex: {
                    description: string;
                    type: any[];
                };
                toggle: {
                    description: string;
                    type: any;
                };
            };
            render: any;
        };
        SuiIcon: {
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                circular: any;
                color: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                disabled: any;
                fitted: any;
                loading: any;
                name: {
                    required: boolean;
                    type: any;
                };
                size: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
            };
            render: any;
        };
    };

    const events: {
        blur: {
            custom: boolean;
        };
        input: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace methods {
        function handleChange(event: any): void;

    }

    namespace props {
        class action {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class error {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class focus {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class transparent {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const value: any[];

        namespace iconPosition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const description: string;

        }

    }

}

export namespace Item {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        href: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ItemContent {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        verticalAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ItemDescription {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace ItemExtra {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace ItemGroup {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        divided: {
            description: string;
            type: any;
        };
        link: {
            description: string;
            type: any;
        };
        relaxed: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        unstackable: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ItemHeader {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        href: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ItemImage {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        href: {
            description: string;
            type: any;
        };
        size: {
            choices: string[];
            description: string;
            type: any[];
            validator: any;
        };
        src: {
            description: string;
            required: boolean;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace ItemMeta {
    const description: string;

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace Label {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace computed {
        function pointingClass(): any;

    }

    namespace props {
        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class image {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace attached {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace basic {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace circular {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace corner {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace empty {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace floating {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace pointing {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace ribbon {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            const description: string;

            function validator(value: any): any;

        }

        namespace tag {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace LabelDetail {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace List {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class divided {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class horizontal {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class items {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class link {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class relaxed {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace bulleted {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace inverted {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace ordered {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace ListContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace ListDescription {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace ListHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace ListIcon {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class circular {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class fitted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const required: boolean;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace ListItem {
    const components: {
        SuiListContent: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiListIcon: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                circular: any;
                color: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                disabled: any;
                fitted: any;
                loading: any;
                name: {
                    required: boolean;
                    type: any;
                };
                size: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
            };
            render: any;
        };
    };

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class content {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace active {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

    }

}

export namespace ListList {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Loader {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class centered {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class content {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class indeterminate {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inline {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace size {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace Menu {
    const components: {
        SuiMenuItem: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                active: {
                    description: string;
                    type: any;
                };
                color: {
                    choices: string[];
                    description: string;
                    type: any;
                    validator: any;
                };
                content: {
                    description: string;
                    type: any;
                };
                disabled: {
                    description: string;
                    type: any;
                };
                fitted: {
                    choices: boolean[];
                    description: string;
                    type: any[];
                    validator: any;
                };
                header: {
                    description: string;
                    type: any;
                };
                icon: {
                    description: string;
                    type: any[];
                };
                link: {
                    description: string;
                    type: any;
                };
                position: {
                    choices: string[];
                    description: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        activeIndex: {
            description: string;
            type: any;
        };
        attached: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        borderless: {
            default: boolean;
            description: string;
            type: any;
        };
        color: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        compact: {
            description: string;
            type: any;
        };
        fixed: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        floated: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        fluid: {
            default: boolean;
            description: string;
            type: any;
        };
        icon: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        inverted: {
            description: string;
            type: any;
        };
        items: {
            description: string;
            type: any;
        };
        pagination: {
            description: string;
            type: any;
        };
        pointing: {
            description: string;
            type: any;
        };
        secondary: {
            description: string;
            type: any;
        };
        tabular: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        text: {
            description: string;
            type: any;
        };
        vertical: {
            description: string;
            type: any;
        };
        widths: {
            choices: number[];
            description: string;
            type: any[];
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace MenuHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        content: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace MenuItem {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        active: {
            description: string;
            type: any;
        };
        color: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        content: {
            description: string;
            type: any;
        };
        disabled: {
            description: string;
            type: any;
        };
        fitted: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        header: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any[];
        };
        link: {
            description: string;
            type: any;
        };
        position: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace MenuMenu {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        position: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace Message {
    const components: {
        SuiIcon: {
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                circular: any;
                color: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                disabled: any;
                fitted: any;
                loading: any;
                name: {
                    required: boolean;
                    type: any;
                };
                size: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
            };
            render: any;
        };
        SuiMessageContent: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiMessageHeader: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiMessageItem: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiMessageList: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
    };

    const events: {
        dismiss: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        attached: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
        color: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        compact: {
            description: string;
            type: any;
        };
        content: {
            description: string;
            type: any;
        };
        dismissable: {
            description: string;
            type: any;
        };
        error: {
            description: string;
            type: any;
        };
        floating: {
            description: string;
            type: any;
        };
        header: {
            description: string;
            type: any;
        };
        icon: {
            description: string;
            type: any[];
        };
        info: {
            description: string;
            type: any;
        };
        list: {
            description: string;
            type: any;
        };
        negative: {
            description: string;
            type: any;
        };
        positive: {
            description: string;
            type: any;
        };
        size: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        success: {
            description: string;
            type: any;
        };
        warning: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

    namespace methods {
        function handleDismiss(): void;

    }

}

export namespace MessageContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace MessageHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace MessageItem {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace MessageList {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Modal {
    const events: {
        changed: {
            custom: boolean;
        };
        clickAwayModal: {
            custom: boolean;
        };
        displayChanged: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const model: {
        event: string;
        prop: string;
    };

    const name: string;

    const props: {
        aligned: {
            choices: string[];
            type: any;
            validator: any;
        };
        animation: {
            choices: string[];
            default: string;
            type: any;
            validator: any;
        };
        animationDuration: {
            default: number;
            type: any;
        };
        basic: {
            type: any;
        };
        closable: {
            default: boolean;
            type: any;
        };
        closeIcon: {
            default: boolean;
            type: any;
        };
        dimmer: {
            choices: string[];
            type: any;
            validator: any;
        };
        image: {
            default: boolean;
            type: any;
        };
        open: {
            default: boolean;
            type: any;
        };
        size: {
            choices: string[];
            default: string;
            type: any;
            validator: any;
        };
    };

    function beforeDestroy(): void;

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace computed {
        function dimmerClass(): any;

        function dimmerStyle(): any;

        function modalClass(): any;

        function modalStyle(): any;

        function visible(): any;

    }

    namespace methods {
        function close(): void;

        function dimmerClick(event: any): void;

        function onAnimationEnd(): void;

    }

    namespace watch {
        function open(newValue: any): void;

        function visualState(newValue: any): void;

    }

}

export namespace ModalActions {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace ModalContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class image {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace scrolling {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

    }

}

export namespace ModalDescription {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace ModalHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
    };

    function render(...args: any[]): any;

}

export namespace Popup {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        basic: {
            description: string;
            type: any;
        };
        content: {
            description: string;
            type: any;
        };
        flowing: {
            description: string;
            type: any;
        };
        header: {
            description: string;
            type: any;
        };
        hoverable: {
            description: string;
            type: any;
        };
        inverted: {
            description: string;
            type: any;
        };
        position: {
            choices: string[];
            default: string;
            description: string;
            type: any;
            validator: any;
        };
        size: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        wide: {
            choices: boolean[];
            description: string;
            type: any[];
            validator: any;
        };
    };

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace methods {
        function close(): void;

        function handleBlur(): void;

        function handleContainerHover(): void;

        function handleOpen(): void;

    }

}

export namespace PopupContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace PopupHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Progress {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace computed {
        function percentString(): any;

    }

    namespace props {
        class attached {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class bottom {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class content {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class indeterminate {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class indicating {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class progress {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class top {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace percent {
            const type: any[];

            function validator(value: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace state {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace Rail {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class attached {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class dividing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class internal {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace position {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace Rating {
    const binding: {
        event: string;
        prop: string;
    };

    const events: {
        rate: {
            custom: boolean;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function render(...args: any[]): any;

    namespace methods {
        function getCurrentValue(evt: any): any;

        function onMouseleave(): void;

        function onMouseover(evt: any): void;

        function onRate(evt: any): void;

    }

    namespace props {
        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class maxRating {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(p0: any): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static EPSILON: number;

            static MAX_SAFE_INTEGER: number;

            static MAX_VALUE: number;

            static MIN_SAFE_INTEGER: number;

            static MIN_VALUE: number;

            static NEGATIVE_INFINITY: number;

            static NaN: number;

            static POSITIVE_INFINITY: number;

            static isFinite(p0: any): any;

            static isInteger(p0: any): any;

            static isNaN(p0: any): any;

            static isSafeInteger(p0: any): any;

            static parseFloat(p0: any): any;

            static parseInt(p0: any, p1: any): any;

        }

        class rating {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(p0: any): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static EPSILON: number;

            static MAX_SAFE_INTEGER: number;

            static MAX_VALUE: number;

            static MIN_SAFE_INTEGER: number;

            static MIN_VALUE: number;

            static NEGATIVE_INFINITY: number;

            static NaN: number;

            static POSITIVE_INFINITY: number;

            static isFinite(p0: any): any;

            static isInteger(p0: any): any;

            static isNaN(p0: any): any;

            static isSafeInteger(p0: any): any;

            static parseFloat(p0: any): any;

            static parseInt(p0: any, p1: any): any;

        }

    }

}

export namespace Reveal {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        active: {
            description: string;
            type: any;
        };
        animated: {
            choices: string[];
            type: any;
            validator: any;
        };
        disabled: {
            description: string;
            type: any;
        };
        instant: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace RevealContent {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class hidden {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class visible {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Segment {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class basic {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class circular {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class compact {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class piled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class raised {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class vertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace aligned {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace attached {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace clearing {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const description: string;

        }

        namespace color {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace emphasis {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace floated {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace padded {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace stacked {
            const choices: boolean[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace Segments {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class horizontal {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class piled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class raised {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class stacked {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class vertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Sidebar {
    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function data(): any;

    function render(...args: any[]): any;

    namespace props {
        class visible {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace animation {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace direction {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace width {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

    namespace watch {
        function visible(): void;

    }

}

export namespace SidebarPushable {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace SidebarPusher {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class dimmed {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Statistic {
    const mixins: {
        methods: {
            getUIClass: any;
        };
    }[];

    const name: string;

    const props: {
        color: {
            choices: string[];
            type: any;
            validator: any;
        };
        floated: {
            choices: string[];
            type: any;
            validator: any;
        };
        horizontal: {
            description: string;
            type: any;
        };
        inverted: {
            description: string;
            type: any;
        };
        size: {
            choices: string[];
            type: any;
            validator: any;
        };
    };

    function render(...args: any[]): any;

}

export namespace StatisticGroup {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class horizontal {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace columns {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace StatisticLabel {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace StatisticValue {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class text {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace Step {
    const components: {
        SuiIcon: {
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                circular: any;
                color: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
                disabled: any;
                fitted: any;
                loading: any;
                name: {
                    required: boolean;
                    type: any;
                };
                size: {
                    choices: string[];
                    type: any;
                    validator: any;
                };
            };
            render: any;
        };
        SuiStepContent: {
            components: {
                SuiStepDescription: {
                    meta: {
                        parent: string;
                    };
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    render: any;
                };
                SuiStepTitle: {
                    meta: {
                        parent: string;
                    };
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    render: any;
                };
            };
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                description: any;
                title: any;
            };
            render: any;
        };
        SuiStepDescription: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiStepTitle: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class completed {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class description {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class link {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class title {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace StepContent {
    const components: {
        SuiStepDescription: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
        SuiStepTitle: {
            meta: {
                parent: string;
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            render: any;
        };
    };

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class description {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class title {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

    }

}

export namespace StepDescription {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace StepGroup {
    const components: {
        SuiStep: {
            components: {
                SuiIcon: {
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    props: {
                        circular: any;
                        color: {
                            choices: string[];
                            type: any;
                            validator: any;
                        };
                        disabled: any;
                        fitted: any;
                        loading: any;
                        name: {
                            required: boolean;
                            type: any;
                        };
                        size: {
                            choices: string[];
                            type: any;
                            validator: any;
                        };
                    };
                    render: any;
                };
                SuiStepContent: {
                    components: {
                        SuiStepDescription: {
                            meta: {
                                parent: string;
                            };
                            mixins: {
                                methods: {
                                    classes: any;
                                    getChildListeners: any;
                                    getChildProps: any;
                                    getChildPropsAndListeners: any;
                                    getElementType: any;
                                    num: any;
                                };
                            }[];
                            name: string;
                            render: any;
                        };
                        SuiStepTitle: {
                            meta: {
                                parent: string;
                            };
                            mixins: {
                                methods: {
                                    classes: any;
                                    getChildListeners: any;
                                    getChildProps: any;
                                    getChildPropsAndListeners: any;
                                    getElementType: any;
                                    num: any;
                                };
                            }[];
                            name: string;
                            render: any;
                        };
                    };
                    meta: {
                        parent: string;
                    };
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    props: {
                        description: any;
                        title: any;
                    };
                    render: any;
                };
                SuiStepDescription: {
                    meta: {
                        parent: string;
                    };
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    render: any;
                };
                SuiStepTitle: {
                    meta: {
                        parent: string;
                    };
                    mixins: {
                        methods: {
                            classes: any;
                            getChildListeners: any;
                            getChildProps: any;
                            getChildPropsAndListeners: any;
                            getElementType: any;
                            num: any;
                        };
                    }[];
                    name: string;
                    render: any;
                };
            };
            mixins: {
                methods: {
                    classes: any;
                    getChildListeners: any;
                    getChildProps: any;
                    getChildPropsAndListeners: any;
                    getElementType: any;
                    num: any;
                };
            }[];
            name: string;
            props: {
                active: any;
                completed: any;
                description: any;
                disabled: any;
                icon: any;
                link: any;
                title: any;
            };
            render: any;
        };
    };

    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class fluid {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class ordered {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class stackable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class steps {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class unstackable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class vertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace attached {
            const choices: boolean[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace size {
            const choices: string[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace stepNumber {
            const choices: number[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace StepTitle {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace Tab {
    const name: string;

    const props: {
        activeIndex: {
            default: number;
            type: any[];
        };
        menu: {
            default: any;
            type: any;
        };
        menuPosition: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
    };

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace computed {
        function tabMenu(): any;

    }

    namespace methods {
        function addTab(tab: any): void;

        function openTab(e: any, tab: any): void;

    }

    namespace watch {
        function activeIndex(newIndex: any): void;

    }

}

export namespace TabPane {
    const meta: {
        parent: string;
    };

    const name: string;

    const props: {
        attached: {
            default: boolean;
            type: any[];
        };
        disabled: {
            default: boolean;
            type: any;
        };
        icon: {
            type: any;
        };
        label: {
            type: any;
        };
        loading: {
            default: boolean;
            type: any;
        };
        title: {
            required: boolean;
            type: any;
        };
    };

    function data(): any;

    function mounted(): void;

    function render(...args: any[]): any;

    namespace computed {
        function classList(): any;

    }

    namespace methods {
        function close(): void;

        function findParent(): any;

        function open(): void;

    }

}

export namespace Table {
    const description: string;

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class celled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class collapsing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class definition {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class fixed {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inverted {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selectable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class singleLine {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class stackable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class striped {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class unstackable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace basic {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace columns {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace compact {
            const choices: boolean[];

            const description: string;

            const type: any[];

            function validator(value: any): any;

        }

        namespace padded {
            const choices: boolean[];

            const type: any[];

            function validator(value: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace textAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

    }

}

export namespace TableBody {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

}

export namespace TableCell {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class collapsing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class negative {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class positive {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selectable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selected {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class singleLine {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class warning {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace state {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace textAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace verticalAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace width {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace TableFooter {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class fullWidth {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace TableHeader {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class fullWidth {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

    }

}

export namespace TableHeaderCell {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    function render(...args: any[]): any;

    namespace props {
        class collapsing {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class negative {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class positive {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selectable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selected {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class singleLine {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class warning {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace textAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace verticalAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const choices: string[];

            function validator(value: any): any;

        }

        namespace width {
            const choices: number[];

            const type: any[];

            function validator(value: any): any;

        }

    }

}

export namespace TableRow {
    const meta: {
        parent: string;
    };

    const mixins: {
        methods: {
            classes: any;
            getChildListeners: any;
            getChildProps: any;
            getChildPropsAndListeners: any;
            getElementType: any;
            num: any;
        };
    }[];

    const name: string;

    const props: {
        active: {
            description: string;
            type: any;
        };
        disabled: {
            description: string;
            type: any;
        };
        error: {
            description: string;
            type: any;
        };
        negative: {
            description: string;
            type: any;
        };
        positive: {
            description: string;
            type: any;
        };
        selected: {
            description: string;
            type: any;
        };
        state: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        textAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        verticalAlign: {
            choices: string[];
            description: string;
            type: any;
            validator: any;
        };
        warning: {
            description: string;
            type: any;
        };
    };

    function render(...args: any[]): any;

}

